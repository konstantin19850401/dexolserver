From 58b95c3546fc3e90dfaf0c0b67ec66b67a6e4bbf Mon Sep 17 00:00:00 2001
From: "HUAWEI15D\\nafte" <naf.ter@mail.ru>
Date: Wed, 23 Nov 2022 10:46:16 +0300
Subject: [PATCH] 23.11.22

---
 application/Toolbox.js             |   1 +
 application/apps/converter/Core.js | 357 ++++++++++++++++++++++++
 application/apps/dex/Core.js       | 430 +++++++++++------------------
 application/apps/kiwi/Api.js       |   3 +-
 application/apps/kiwi/Core.js      | 202 ++++++++++----
 5 files changed, 659 insertions(+), 334 deletions(-)
 create mode 100644 application/apps/converter/Core.js

diff --git a/application/Toolbox.js b/application/Toolbox.js
index 562e819..f0167f6 100644
--- a/application/Toolbox.js
+++ b/application/Toolbox.js
@@ -75,6 +75,7 @@ class Toolbox {
             str = str.replace(/'/g, "&#39;");
             str = str.replace(/</g, "<");
             str = str.replace(/>/g, ">");
+            str = str.replace(/\\/g, "/");
         };
         return str;
 	}
diff --git a/application/apps/converter/Core.js b/application/apps/converter/Core.js
new file mode 100644
index 0000000..c77e252
--- /dev/null
+++ b/application/apps/converter/Core.js
@@ -0,0 +1,357 @@
+"use strict"
+const RulesMega = require("./RulesMega");
+class Core {
+	#name = "converter";#core;#HTTP_STATUSES;#connector;#toolbox;
+	#list = [];
+	constructor(...args) {
+		this.#core = args[0];
+		this.#HTTP_STATUSES = this.#core.HttpStatuses;
+		this.#connector = this.#core.Connector;
+		this.#toolbox = this.#core.Toolbox;
+		// this.#api = new Api(this.#core);
+		this.#Init();
+	}
+	async #Init() {
+		let rows = await this.#connector.Request("dexol", `
+			SELECT * FROM dicts_data
+			WHERE dict = 'bases'
+		`);
+		for (let row of rows) {
+			if (row.id_record == 2 ) {
+				this.#list.push(new Base(row, this.#connector, this.#core));
+				break;
+			}
+			// break;
+		}
+		// setTimeout(()=> {
+		// 	for (let item of this.#list) console.log(item.Name, " ", item.Title, " ", item.Status, "  ", item.Operator);
+		// }, 1000);
+	}
+	get Name() { return this.#name; }
+
+	Check(packet, users, response) {
+		// let allowed = [
+		// 	{name: "api",           method: (...args) => { this.#api.Check(...args) } }
+		// ];
+		// if (!allowed.find(item=> item.name == packet.subcom)) {
+		// 	let p = {subcom: packet.subcom, status: this.#HTTP_STATUSES.METHOD_NOT_ALLOWED, data: {errs: ["Method not allowed"]}};
+		// 	response.end(new Packet(p).ToString());
+		// } else {
+		// 	if (packet.subcom != "api") response.end(new Packet({subcom: packet.subcom, status: this.#HTTP_STATUSES.OK, message: "Ok"}).ToString());
+		// 	allowed.find(item=> item.name == packet.subcom).method(packet, users, response);
+		// }
+	}
+}
+module.exports = Core;
+
+class Packet {
+	#packet = {};
+	constructor(args) {
+		this.#packet.com = args?.com || "dexol.apps.dex";
+		this.#packet.subcom = args?.subcom;
+		this.#packet.data = args?.data;
+		this.#packet.status = args?.status;
+		this.#packet.message = args?.message;
+		this.#packet.hash = args?.hash;
+	}
+}
+
+
+class Base {
+	#name;#title;#status;#connector;#toolbox;#operator;#core;
+	#journal = new Map();#archive = new Map();#tp = [];#profiles = [];
+	#units = [];#registers = [];
+	constructor(row, connector, core) {
+		this.#connector = connector;
+		this.#core = core;
+		this.#toolbox = core.Toolbox;
+
+
+		this.#Init(row);
+	}
+	get Name() { return this.#name; }
+	get Title() { return this.#title; }
+	get Status() { return this.#status; }
+	get Operator() { return this.#operator; }
+	async #Init(row) {
+		let data = JSON.parse(row.data);
+		this.#name = data?.uid || "";
+		this.#title = data?.title || "";
+		this.#status = data?.status || 0;
+		this.#operator = await this.#GetOperator(data?.operator);
+		// setTimeout(()=> this.#ConvertBase(), 5000);
+	}
+	async #ConvertBase() {
+		await this.#connector.Request("dexol", `
+			CREATE TABLE IF NOT EXISTS dex_${this.#name} (
+				id INT(15) AUTO_INCREMENT NOT NULL,
+				userId VARCHAR(32) NOT NULL,
+				jtype TINYINT(1) NOT NULL,
+				store INT(10) NOT NULL,
+				status INT(2) NOT NULL,
+				signature VARCHAR(25) NOT NULL,
+				jdocdate VARCHAR(17) NOT NULL,
+				date TIMESTAMP NOT NULL,
+				data TEXT NOT NULL,
+				type TINYINT(1) NOT NULL,
+				del INT(2) NOT NULL DEFAULT 0,
+				primary key (id)
+			)
+		`)
+
+		let jtypes = [{id: 2, name: "archive"}, {id: 1, name: "journal"}]
+		// let jtypes = [{id: 2, name: "archive"}]
+		// let jtypes = [{id: 1, name: "journal"}]
+
+		for (let jtype of jtypes) {
+			let cc = 0;
+
+			let cnt = 0;let arr = [];
+			let rows = await this.#connector.Request("dexol", `SELECT * FROM ${jtype.name}`);
+			console.log("получение данных и вставка ");
+			let date = this.#toolbox.Moment();
+			let inserts = [];
+			for (let row of rows) {
+				let docType = 1;// 1 - вручную. 2 - автоматически автодоком, 3 - автоматически из выгрузки из удаленки оператора. Данные не полные. 4 - на основании другого документа
+				// console.log(row.data);
+				let temp = await this.#toolbox.XmlToString(row.data);
+				let data = {document: {}};
+				if (temp?.Document) {
+					data.document.DocCity = Array.isArray(temp.Document?.DocCity) ? temp.Document?.DocCity[0] : "";
+					data.document.DocNum = Array.isArray(temp.Document?.DocNum) ? temp.Document?.DocNum[0] : "";
+					data.document.DocDateJournal = Array.isArray(temp.Document?.DocDateJournal) ? temp.Document?.DocDateJournal[0] : "";
+					data.document.DocDate = Array.isArray(temp?.Document?.DocDate) ? temp?.Document?.DocDate[0] : "";
+					data.document.CodeWord = Array.isArray(temp.Document?.CodeWord) ? temp.Document?.CodeWord[0] : "";
+					data.document.MSISDN = Array.isArray(temp.Document?.MSISDN) ? temp.Document?.MSISDN[0] : "";
+					data.document.ICC = Array.isArray(temp.Document?.ICC) ? temp.Document?.ICC[0] : "";
+					data.document.ICCCTL = Array.isArray(temp.Document?.ICCCTL) ? temp.Document?.ICCCTL[0] : "";
+					data.document.FirstName = Array.isArray(temp.Document?.FirstName) ? temp.Document?.FirstName[0] : "";
+					data.document.SecondName = Array.isArray(temp.Document?.SecondName) ? temp.Document?.SecondName[0] : "";
+					data.document.LastName = Array.isArray(temp.Document?.LastName) ? temp.Document?.LastName[0] : "";
+					data.document.Birth = Array.isArray(temp.Document?.Birth) ? temp.Document?.Birth[0] : "";
+
+					data.document.FizDocNumber = Array.isArray(temp.Document?.FizDocNumber) ? temp.Document?.FizDocNumber[0] : "";
+					data.document.FizDocSeries = Array.isArray(temp.Document?.FizDocSeries) ? temp.Document?.FizDocSeries[0] : "";
+					data.document.FizDocOrgCode = Array.isArray(temp.Document?.FizDocOrgCode) ? temp.Document?.FizDocOrgCode[0] : "";
+					data.document.FizDocOrg = Array.isArray(temp.Document?.FizDocOrg) ? temp.Document?.FizDocOrg[0] : "";
+					data.document.FizDocDate = Array.isArray(temp.Document?.FizDocDate) ? temp.Document?.FizDocDate[0] : "";
+					data.document.FizBirthPlace = Array.isArray(temp.Document?.FizBirthPlace) ? temp.Document?.FizBirthPlace[0] : "";
+
+					data.document.AddrZip = Array.isArray(temp.Document?.AddrZip) ? temp.Document?.AddrZip[0] : "";
+					data.document.AddrStreet = Array.isArray(temp.Document?.AddrStreet) ? temp.Document?.AddrStreet[0] : "";
+					data.document.AddrHouse = Array.isArray(temp.Document?.AddrHouse) ? temp.Document?.AddrHouse[0] : "";
+					data.document.AddrBuilding = Array.isArray(temp.Document?.AddrBuilding) ? temp.Document?.AddrBuilding[0] : "";
+					data.document.AddrApartment = Array.isArray(temp.Document?.AddrApartment) ? temp.Document?.AddrApartment[0] : "";
+					if (data.document.AddrApartment == ".") data.document.AddrApartment = "";
+					data.document.AddrPhone = Array.isArray(temp.Document?.AddrPhone) ? temp.Document?.AddrPhone[0] : "";
+					data.document.AddrRegion = Array.isArray(temp.Document?.AddrRegion) ? temp.Document?.AddrRegion[0] : "";
+
+					data.document.ContactEmail = Array.isArray(temp.Document?.ContactEmail) ? temp.Document?.ContactEmail[0] : "";
+					data.document.FizInn = Array.isArray(temp.Document?.FizInn) ? temp.Document?.FizInn[0] : "";
+
+					data.document.DeliveryStreet = Array.isArray(temp.Document?.DeliveryStreet) ? temp.Document?.DeliveryStreet[0] : "";
+					data.document.DeliveryHouse = Array.isArray(temp.Document?.DeliveryHouse) ? temp.Document?.DeliveryHouse[0] : "";
+					data.document.DeliveryBuilding = Array.isArray(temp.Document?.DeliveryBuilding) ? temp.Document?.DeliveryBuilding[0] : "";
+					data.document.DeliveryApartment = Array.isArray(temp.Document?.DeliveryApartment) ? temp.Document?.DeliveryApartment[0] : "";
+					if (data.document.DeliveryApartment == ".") data.document.DeliveryApartment = "";
+					data.document.DeliveryZip = Array.isArray(temp.Document?.DeliveryZip) ? temp.Document?.DeliveryZip[0] : "";
+					data.document.DeliveryRegion = Array.isArray(temp.Document?.DeliveryRegion) ? temp.Document?.DeliveryRegion[0] : "";
+
+					//категория оплаты
+					if (temp.Document?.DocCategory) {
+						if (this.#operator == "MEGAFON") data.document.DocCategory = RulesMega.DocCategory(parseInt(temp.Document?.DocCategory[0]));
+					}
+
+					// пол
+					if (temp.Document?.Sex) {
+						if (this.#operator == "MEGAFON") data.document.Sex = RulesMega.Sex(parseInt(temp.Document?.Sex[0]));
+					}
+
+					// профиль отправки
+					if (temp.Document?.ProfileCode) {
+						if (this.#operator == "MEGAFON") data.document.ProfileCode = RulesMega.ProfileCode(temp.Document?.ProfileCode[0]);
+						if (data.document.ProfileCode == "" && Array.isArray(temp.Document?.ProfileCode) && temp.Document?.ProfileCode[0] != "") {
+							if (arr.indexOf(temp.Document.ProfileCode[0]) == -1) {
+								arr.push(temp.Document.ProfileCode[0]);
+								console.log(`"${temp.Document.ProfileCode[0].toLowerCase()}",`);
+								if (cc == 10) break;
+								else cc++;
+							}
+						}
+					}
+
+					// страна
+					if (temp.Document?.AddrCountry) {
+						if (this.#operator == "MEGAFON") {
+							data.document.AddCountry = RulesMega.GetCountry(temp.Document?.AddrCountry[0]);
+							if (data.document.AddrCountry == "" && Array.isArray(temp.Document?.AddrCountry) && temp.Document?.AddrCountry[0] != "") {
+								console.log(`для >${temp.Document?.AddrState[0]}< нет значения страны. id = `, row.id);
+								if (cc == 5) break;
+								else cc++;
+							}
+						}
+					}
+					// страна доставки
+					if (temp.Document?.DeliveryCountry) {
+						if (this.#operator == "MEGAFON") {
+							data.document.DeliveryCountry = RulesMega.GetCountry(temp.Document?.DeliveryCountry[0]);
+							if (data.document.DeliveryCountry == "" && Array.isArray(temp.Document?.DeliveryCountry) && temp.Document?.DeliveryCountry[0] != "") {
+								console.log(`для >${temp.Document?.DeliveryCountry[0]}< нет значения страны доставки. id = `, row.id);
+								if (cc == 5) break;
+								else cc++;
+							}
+						}
+					}
+
+					// тип абонента(резидент/нерезидент)
+					if (temp.Document?.DocClientType) {
+						if (this.#operator == "MEGAFON") {
+							data.document.DocClientType = RulesMega.DocClientType(temp.Document?.DocClientType[0]);
+							if (data.document.DocClientType == "" && Array.isArray(temp.Document?.DocClientType) && temp.Document?.DocClientType[0] != "") {
+								console.log(`для >${temp.Document?.DocClientType[0]}< нет значения категории абонента. id = `, row.id);
+								if (cc == 5) break;
+								else cc++;
+							}
+						}
+					}
+
+					// регион
+					if (temp.Document?.AddrState) {
+						if (this.#operator == "MEGAFON") {
+							data.document.AddrState = RulesMega.AddrState(temp.Document?.AddrState[0]);
+							if (data.document.AddrState == "" && Array.isArray(temp.Document?.AddrState) && temp.Document?.AddrState[0] != "") {
+								if (arr.indexOf(temp.Document.AddrState[0]) == -1) {
+									arr.push(temp.Document.AddrState[0]);
+									console.log(`"${temp.Document.AddrState[0].toLowerCase()}",`);
+									if (cc == 40) break;
+									else cc++;
+								}
+
+							}
+						}
+					}
+					// регион доставки
+					if (temp.Document?.DeliveryState) {
+						if (this.#operator == "MEGAFON") {
+							data.document.DeliveryState = RulesMega.AddrState(temp.Document?.DeliveryState[0]);
+							if (data.document.DeliveryState == "" && Array.isArray(temp.Document?.DeliveryState) && temp.Document?.DeliveryState[0] != "") {
+								if (arr.indexOf(temp.Document.DeliveryState[0]) == -1) {
+									arr.push(temp.Document.DeliveryState[0]);
+									console.log(`"${temp.Document.DeliveryState[0].toLowerCase()}",`);
+									if (cc == 40) break;
+									else cc++;
+								}
+
+							}
+						}
+					}
+
+					// фирменный салон связи или нет
+					if (Array.isArray(temp.Document?.fs)) {
+
+						if (this.#operator == "MEGAFON") data.document.Fs = RulesMega.Fs(temp.Document.fs);
+					} else data.document.Fs = 2;
+
+
+					//тип документа
+					if (temp.Document?.gf && Array.isArray(temp.Document?.gf) && temp.Document?.gf[0] == "True") {
+						try {
+							data.document.FizDocType = RulesMega.FizDocTypeNew(parseInt(temp.Document?.FizDocType[0]));
+						} catch(e) {
+							docType = 3;
+						}
+					} else {
+						try {
+							if (this.#toolbox.IsNumber(temp.Document?.FizDocType[0])) {
+								data.document.FizDocType = RulesMega.FizDocTypeOld(parseInt(temp.Document?.FizDocType[0]));
+							} else {
+								data.document.FizDocType = RulesMega.FizDocTypeOldString(temp.Document?.FizDocType[0]);
+							}
+
+						} catch(e) {
+							docType = 3;
+						}
+					}
+					if (data.document.FizDocType == "") console.log("Тип документа отсутствует для id = ", row.id);
+
+
+
+					for (let key in data.document) data.document[key] = this.#toolbox.HtmlSpecialChars(data.document[key]);
+
+					// console.log("data=> ", data.document);
+
+					// если docType == 1, надо бы тогда с журналом разобраться
+					if (docType == 1) {
+						let logs = await this.#toolbox.XmlToString(row.journal);
+						if (logs && logs?.journal?.record && logs?.journal?.record[0]) {
+							if (logs.journal.record[0]?.text && logs.journal.record[0]?.text == "Документ сформирован функцией формирования группы документов") {
+								docType = 2;
+							} else if (logs.journal.record[0]?.text && logs.journal.record[0]?.text == "Документ на основе другого документа добавлен в журнал") {
+								docType = 4;
+							}
+						} else console.log("для записи ", row.id, " странный журнал");
+					}
+
+					let userId;
+					if (row.userid == "dex") userId = "";
+					else {
+						userId = RulesMega.UserId(row.userid);
+						if (userId == "") console.log("нет userid для ", row.userid);
+					}
+
+					let time = date(row.signature, "YYYYMMDDhhmmssSSS").format("YYYY-MM-DD hh:mm:ss.SSS");
+					// await this.#connector.Request("dexol", `
+					// 	INSERT INTO dex_${this.#name}
+					// 	SET userId = '${userId}', jtype = '${jtype.id}', store = '${row.unitid}', status = '${row.status}', signature = '${row.signature}', jdocdate = '${row.jdocdate}', data = '${JSON.stringify(data)}', date = '${time}', type = '${docType}'
+					// `);
+					// break;
+					// this.#journal.set(row.id, data);
+					//
+					//
+
+					let value = `('${userId}','${jtype.id}','${row.unitid}','${row.status}','${row.signature}','${row.jdocdate}','${JSON.stringify(data)}','${time}','${docType}')`;
+					inserts.push(value);
+
+
+					if (inserts.length == 100 || cnt == rows.length - 1) {
+						if (inserts.length > 0) {
+							let result = await this.#connector.Request("dexol", `
+								INSERT INTO dex_${this.#name} (userId, jtype, store, status, signature, jdocdate, data, date, type)
+								VALUES ${inserts.join(",")}
+							`);
+							// console.log(result);
+							if (inserts.length != result.affectedRows) console.log("не соответствует");
+							inserts = [];
+						}
+					}
+				} else console.log("нет значения");
+				// break;
+
+
+				cnt++;
+			}
+			console.log("вставка окончена. Обработано ", cnt, " записей");
+		}
+
+
+
+	}
+	Period(typeJournal, start, end, filter) {
+
+	}
+
+
+	async #GetOperator(id) {
+		let rows = await this.#connector.Request("dexol", `
+			SELECT * FROM dicts_data WHERE dict = 'operators'
+		`);
+		for (let row of rows) {
+			if (row.id_record == id) {
+				let data = JSON.parse(row.data);
+				return data.uid;
+			}
+		}
+		return;
+	}
+
+}
\ No newline at end of file
diff --git a/application/apps/dex/Core.js b/application/apps/dex/Core.js
index 8cdd156..7b2dd1c 100644
--- a/application/apps/dex/Core.js
+++ b/application/apps/dex/Core.js
@@ -1,6 +1,5 @@
 "use strict"
 const Api = require("./Api");
-const RulesMega = require("./RulesMega");
 class Core {
 	#name = "dex";#api;#core;#HTTP_STATUSES;#connector;#toolbox;
 	#list = [];
@@ -12,24 +11,23 @@ class Core {
 		this.#api = new Api(this.#core);
 		this.#Init();
 	}
+	get Name() { return this.#name; }
 	async #Init() {
 		let rows = await this.#connector.Request("dexol", `
 			SELECT * FROM dicts_data
-			WHERE dict = 'bases'
+			WHERE dict = 'bases' AND del = '0'
 		`);
 		for (let row of rows) {
-			if (row.id_record == 2 ) {
-				this.#list.push(new Base(row, this.#connector, this.#core));
-				break;
-			}
-			// break;
+			this.#list.push(new Base(row, this.#connector, this.#core));
 		}
-		// setTimeout(()=> {
-		// 	for (let item of this.#list) console.log(item.Name, " ", item.Title, " ", item.Status, "  ", item.Operator);
-		// }, 1000);
 	}
-	get Name() { return this.#name; }
+<<<<<<< HEAD
+	
+	async GetBaseRecord() {
 
+	}
+=======
+>>>>>>> origin/master
 	Check(packet, users, response) {
 		let allowed = [
 			{name: "api",           method: (...args) => { this.#api.Check(...args) } }
@@ -59,289 +57,71 @@ class Packet {
 
 
 class Base {
-	#name;#title;#status;#connector;#toolbox;#operator;#core;
-	#journal = new Map();#archive = new Map();#tp = [];#profiles = [];
-	#units = [];#registers = [];
+	#connector;#toolbox;#core;
+	#name;#operator;#title;#status;#baseName;
+<<<<<<< HEAD
+	#journal = [];#archive = [];
+=======
+	#journal = new Map();#archive = new Map();
+
+	// #name;#title;#status;#operator;
+	// #journal = new Map();#archive = new Map();#tp = [];#profiles = [];
+	// #units = [];#registers = [];
+>>>>>>> origin/master
 	constructor(row, connector, core) {
 		this.#connector = connector;
 		this.#core = core;
 		this.#toolbox = core.Toolbox;
-
-
 		this.#Init(row);
 	}
 	get Name() { return this.#name; }
+	get BaseName() { return this.#baseName; }
 	get Title() { return this.#title; }
 	get Status() { return this.#status; }
 	get Operator() { return this.#operator; }
+	get Journal() { return this.#journal; }
+	get Archive() { return this.#archive; }
 	async #Init(row) {
 		let data = JSON.parse(row.data);
 		this.#name = data?.uid || "";
 		this.#title = data?.title || "";
 		this.#status = data?.status || 0;
+		this.#baseName = data?.base || "";
 		this.#operator = await this.#GetOperator(data?.operator);
-		// setTimeout(()=> this.#ConvertBase(), 5000);
+		await this.#LoadJournals();
+<<<<<<< HEAD
+		// setTimeout( async ()=> await this.GetPeriod({delStatus: 0, baseName: "mega", jtype: "archive", search: "федор", creationMethod: 1, status: 4, store: 9999, start: "20090601", end: "20090610" }), 5000);
+		//setTimeout( async ()=> await this.GetJRecord({jtype: "archive", id: 500}), 5000);
+		setTimeout( async ()=> { 
+			let res = await this.DeleteRecord({jtype: "archive", id: 500});
+			if (res) console.log("зарись удалена");
+			if (!res) console.log("зарись не удалена");
+		}, 5000);
 	}
-	async #ConvertBase() {
-		await this.#connector.Request("dexol", `
-			CREATE TABLE IF NOT EXISTS dex_${this.#name} (
-				id INT(15) AUTO_INCREMENT NOT NULL,
-				userId VARCHAR(32) NOT NULL,
-				jtype TINYINT(1) NOT NULL,
-				store INT(10) NOT NULL,
-				status INT(2) NOT NULL,
-				signature VARCHAR(25) NOT NULL,
-				jdocdate VARCHAR(17) NOT NULL,
-				date TIMESTAMP NOT NULL,
-				data TEXT NOT NULL,
-				type TINYINT(1) NOT NULL,
-				del INT(2) NOT NULL DEFAULT 0,
-				primary key (id)
-			)
-		`)
-
-		let jtypes = [{id: 2, name: "archive"}, {id: 1, name: "journal"}]
-		// let jtypes = [{id: 2, name: "archive"}]
-		// let jtypes = [{id: 1, name: "journal"}]
-
-		for (let jtype of jtypes) {
-			let cc = 0;
-
-			let cnt = 0;let arr = [];
-			let rows = await this.#connector.Request("dexol", `SELECT * FROM ${jtype.name}`);
-			console.log("получение данных и вставка ");
-			let date = this.#toolbox.Moment();
-			let inserts = [];
-			for (let row of rows) {
-				let docType = 1;// 1 - вручную. 2 - автоматически автодоком, 3 - автоматически из выгрузки из удаленки оператора. Данные не полные. 4 - на основании другого документа
-				// console.log(row.data);
-				let temp = await this.#toolbox.XmlToString(row.data);
-				let data = {document: {}};
-				if (temp?.Document) {
-					data.document.DocCity = Array.isArray(temp.Document?.DocCity) ? temp.Document?.DocCity[0] : "";
-					data.document.DocNum = Array.isArray(temp.Document?.DocNum) ? temp.Document?.DocNum[0] : "";
-					data.document.DocDateJournal = Array.isArray(temp.Document?.DocDateJournal) ? temp.Document?.DocDateJournal[0] : "";
-					data.document.DocDate = Array.isArray(temp?.Document?.DocDate) ? temp?.Document?.DocDate[0] : "";
-					data.document.CodeWord = Array.isArray(temp.Document?.CodeWord) ? temp.Document?.CodeWord[0] : "";
-					data.document.MSISDN = Array.isArray(temp.Document?.MSISDN) ? temp.Document?.MSISDN[0] : "";
-					data.document.ICC = Array.isArray(temp.Document?.ICC) ? temp.Document?.ICC[0] : "";
-					data.document.ICCCTL = Array.isArray(temp.Document?.ICCCTL) ? temp.Document?.ICCCTL[0] : "";
-					data.document.FirstName = Array.isArray(temp.Document?.FirstName) ? temp.Document?.FirstName[0] : "";
-					data.document.SecondName = Array.isArray(temp.Document?.SecondName) ? temp.Document?.SecondName[0] : "";
-					data.document.LastName = Array.isArray(temp.Document?.LastName) ? temp.Document?.LastName[0] : "";
-					data.document.Birth = Array.isArray(temp.Document?.Birth) ? temp.Document?.Birth[0] : "";
-
-					data.document.FizDocNumber = Array.isArray(temp.Document?.FizDocNumber) ? temp.Document?.FizDocNumber[0] : "";
-					data.document.FizDocSeries = Array.isArray(temp.Document?.FizDocSeries) ? temp.Document?.FizDocSeries[0] : "";
-					data.document.FizDocOrgCode = Array.isArray(temp.Document?.FizDocOrgCode) ? temp.Document?.FizDocOrgCode[0] : "";
-					data.document.FizDocOrg = Array.isArray(temp.Document?.FizDocOrg) ? temp.Document?.FizDocOrg[0] : "";
-					data.document.FizDocDate = Array.isArray(temp.Document?.FizDocDate) ? temp.Document?.FizDocDate[0] : "";
-					data.document.FizBirthPlace = Array.isArray(temp.Document?.FizBirthPlace) ? temp.Document?.FizBirthPlace[0] : "";
-
-					data.document.AddrZip = Array.isArray(temp.Document?.AddrZip) ? temp.Document?.AddrZip[0] : "";
-					data.document.AddrStreet = Array.isArray(temp.Document?.AddrStreet) ? temp.Document?.AddrStreet[0] : "";
-					data.document.AddrHouse = Array.isArray(temp.Document?.AddrHouse) ? temp.Document?.AddrHouse[0] : "";
-					data.document.AddrBuilding = Array.isArray(temp.Document?.AddrBuilding) ? temp.Document?.AddrBuilding[0] : "";
-					data.document.AddrApartment = Array.isArray(temp.Document?.AddrApartment) ? temp.Document?.AddrApartment[0] : "";
-					if (data.document.AddrApartment == ".") data.document.AddrApartment = "";
-					data.document.AddrPhone = Array.isArray(temp.Document?.AddrPhone) ? temp.Document?.AddrPhone[0] : "";
-					data.document.AddrRegion = Array.isArray(temp.Document?.AddrRegion) ? temp.Document?.AddrRegion[0] : "";
-
-					data.document.ContactEmail = Array.isArray(temp.Document?.ContactEmail) ? temp.Document?.ContactEmail[0] : "";
-					data.document.FizInn = Array.isArray(temp.Document?.FizInn) ? temp.Document?.FizInn[0] : "";
-
-					data.document.DeliveryStreet = Array.isArray(temp.Document?.DeliveryStreet) ? temp.Document?.DeliveryStreet[0] : "";
-					data.document.DeliveryHouse = Array.isArray(temp.Document?.DeliveryHouse) ? temp.Document?.DeliveryHouse[0] : "";
-					data.document.DeliveryBuilding = Array.isArray(temp.Document?.DeliveryBuilding) ? temp.Document?.DeliveryBuilding[0] : "";
-					data.document.DeliveryApartment = Array.isArray(temp.Document?.DeliveryApartment) ? temp.Document?.DeliveryApartment[0] : "";
-					if (data.document.DeliveryApartment == ".") data.document.DeliveryApartment = "";
-					data.document.DeliveryZip = Array.isArray(temp.Document?.DeliveryZip) ? temp.Document?.DeliveryZip[0] : "";
-					data.document.DeliveryRegion = Array.isArray(temp.Document?.DeliveryRegion) ? temp.Document?.DeliveryRegion[0] : "";
-
-					//категория оплаты
-					if (temp.Document?.DocCategory) {
-						if (this.#operator == "MEGAFON") data.document.DocCategory = RulesMega.DocCategory(parseInt(temp.Document?.DocCategory[0]));
-					}
-
-					// пол
-					if (temp.Document?.Sex) {
-						if (this.#operator == "MEGAFON") data.document.Sex = RulesMega.Sex(parseInt(temp.Document?.Sex[0]));
-					}
-
-					// профиль отправки
-					if (temp.Document?.ProfileCode) {
-						if (this.#operator == "MEGAFON") data.document.ProfileCode = RulesMega.ProfileCode(temp.Document?.ProfileCode[0]);
-						if (data.document.ProfileCode == "" && Array.isArray(temp.Document?.ProfileCode) && temp.Document?.ProfileCode[0] != "") {
-							if (arr.indexOf(temp.Document.ProfileCode[0]) == -1) {
-								arr.push(temp.Document.ProfileCode[0]);
-								console.log(`"${temp.Document.ProfileCode[0].toLowerCase()}",`);
-								if (cc == 10) break;
-								else cc++;
-							}
-						}
-					}
-
-					// страна
-					if (temp.Document?.AddrCountry) {
-						if (this.#operator == "MEGAFON") {
-							data.document.AddCountry = RulesMega.GetCountry(temp.Document?.AddrCountry[0]);
-							if (data.document.AddrCountry == "" && Array.isArray(temp.Document?.AddrCountry) && temp.Document?.AddrCountry[0] != "") {
-								console.log(`для >${temp.Document?.AddrState[0]}< нет значения страны. id = `, row.id);
-								if (cc == 5) break;
-								else cc++;
-							}
-						}
-					}
-					// страна доставки
-					if (temp.Document?.DeliveryCountry) {
-						if (this.#operator == "MEGAFON") {
-							data.document.DeliveryCountry = RulesMega.GetCountry(temp.Document?.DeliveryCountry[0]);
-							if (data.document.DeliveryCountry == "" && Array.isArray(temp.Document?.DeliveryCountry) && temp.Document?.DeliveryCountry[0] != "") {
-								console.log(`для >${temp.Document?.DeliveryCountry[0]}< нет значения страны доставки. id = `, row.id);
-								if (cc == 5) break;
-								else cc++;
-							}
-						}
-					}
-
-					// тип абонента(резидент/нерезидент)
-					if (temp.Document?.DocClientType) {
-						if (this.#operator == "MEGAFON") {
-							data.document.DocClientType = RulesMega.DocClientType(temp.Document?.DocClientType[0]);
-							if (data.document.DocClientType == "" && Array.isArray(temp.Document?.DocClientType) && temp.Document?.DocClientType[0] != "") {
-								console.log(`для >${temp.Document?.DocClientType[0]}< нет значения категории абонента. id = `, row.id);
-								if (cc == 5) break;
-								else cc++;
-							}
-						}
-					}
-
-					// регион
-					if (temp.Document?.AddrState) {
-						if (this.#operator == "MEGAFON") {
-							data.document.AddrState = RulesMega.AddrState(temp.Document?.AddrState[0]);
-							if (data.document.AddrState == "" && Array.isArray(temp.Document?.AddrState) && temp.Document?.AddrState[0] != "") {
-								if (arr.indexOf(temp.Document.AddrState[0]) == -1) {
-									arr.push(temp.Document.AddrState[0]);
-									console.log(`"${temp.Document.AddrState[0].toLowerCase()}",`);
-									if (cc == 40) break;
-									else cc++;
-								}
-
-							}
-						}
-					}
-					// регион доставки
-					if (temp.Document?.DeliveryState) {
-						if (this.#operator == "MEGAFON") {
-							data.document.DeliveryState = RulesMega.AddrState(temp.Document?.DeliveryState[0]);
-							if (data.document.DeliveryState == "" && Array.isArray(temp.Document?.DeliveryState) && temp.Document?.DeliveryState[0] != "") {
-								if (arr.indexOf(temp.Document.DeliveryState[0]) == -1) {
-									arr.push(temp.Document.DeliveryState[0]);
-									console.log(`"${temp.Document.DeliveryState[0].toLowerCase()}",`);
-									if (cc == 40) break;
-									else cc++;
-								}
-
-							}
-						}
-					}
-
-					// фирменный салон связи или нет
-					if (Array.isArray(temp.Document?.fs)) {
-
-						if (this.#operator == "MEGAFON") data.document.Fs = RulesMega.Fs(temp.Document.fs);
-					} else data.document.Fs = 2;
-
-
-					//тип документа
-					if (temp.Document?.gf && Array.isArray(temp.Document?.gf) && temp.Document?.gf[0] == "True") {
-						try {
-							data.document.FizDocType = RulesMega.FizDocTypeNew(parseInt(temp.Document?.FizDocType[0]));
-						} catch(e) {
-							docType = 3;
-						}
-					} else {
-						try {
-							if (this.#toolbox.IsNumber(temp.Document?.FizDocType[0])) {
-								data.document.FizDocType = RulesMega.FizDocTypeOld(parseInt(temp.Document?.FizDocType[0]));
-							} else {
-								data.document.FizDocType = RulesMega.FizDocTypeOldString(temp.Document?.FizDocType[0]);
-							}
-
-						} catch(e) {
-							docType = 3;
-						}
-					}
-					if (data.document.FizDocType == "") console.log("Тип документа отсутствует для id = ", row.id);
-
-
-
-					for (let key in data.document) data.document[key] = this.#toolbox.HtmlSpecialChars(data.document[key]);
-
-					// console.log("data=> ", data.document);
-
-					// если docType == 1, надо бы тогда с журналом разобраться
-					if (docType == 1) {
-						let logs = await this.#toolbox.XmlToString(row.journal);
-						if (logs && logs?.journal?.record && logs?.journal?.record[0]) {
-							if (logs.journal.record[0]?.text && logs.journal.record[0]?.text == "Документ сформирован функцией формирования группы документов") {
-								docType = 2;
-							} else if (logs.journal.record[0]?.text && logs.journal.record[0]?.text == "Документ на основе другого документа добавлен в журнал") {
-								docType = 4;
-							}
-						} else console.log("для записи ", row.id, " странный журнал");
-					}
-
-					let userId;
-					if (row.userid == "dex") userId = "";
-					else {
-						userId = RulesMega.UserId(row.userid);
-						if (userId == "") console.log("нет userid для ", row.userid);
-					}
-
-					let time = date(row.signature, "YYYYMMDDhhmmssSSS").format("YYYY-MM-DD hh:mm:ss.SSS");
-					// await this.#connector.Request("dexol", `
-					// 	INSERT INTO dex_${this.#name}
-					// 	SET userId = '${userId}', jtype = '${jtype.id}', store = '${row.unitid}', status = '${row.status}', signature = '${row.signature}', jdocdate = '${row.jdocdate}', data = '${JSON.stringify(data)}', date = '${time}', type = '${docType}'
-					// `);
-					// break;
-					// this.#journal.set(row.id, data);
-					//
-					//
-
-					let value = `('${userId}','${jtype.id}','${row.unitid}','${row.status}','${row.signature}','${row.jdocdate}','${JSON.stringify(data)}','${time}','${docType}')`;
-					inserts.push(value);
-
-
-					if (inserts.length == 100 || cnt == rows.length - 1) {
-						if (inserts.length > 0) {
-							let result = await this.#connector.Request("dexol", `
-								INSERT INTO dex_${this.#name} (userId, jtype, store, status, signature, jdocdate, data, date, type)
-								VALUES ${inserts.join(",")}
-							`);
-							// console.log(result);
-							if (inserts.length != result.affectedRows) console.log("не соответствует");
-							inserts = [];
-						}
-					}
-				} else console.log("нет значения");
-				// break;
-
-
-				cnt++;
-			}
-			console.log("вставка окончена. Обработано ", cnt, " записей");
-		}
-
-
-
+=======
 	}
+
 	Period(typeJournal, start, end, filter) {
 
 	}
 
-
+>>>>>>> origin/master
+	async #LoadJournals() {
+		let journals = [{id: 1, name: "journal", storage: this.#journal}, {id: 2, name: "archive", storage: this.#archive}];
+		for (let journal of journals) {
+			let rows = await this.#connector.Request("dexol", `
+				SELECT * FROM ${this.#baseName}
+<<<<<<< HEAD
+				WHERE jtype = '${journal.id}'
+			`);
+			for (let row of rows) journal.storage.push(new JRecord(row, this.#connector, this.#toolbox, this));
+=======
+				WHERE jtype = '${journal.id}' AND del = '0'
+			`);
+			for (let row of rows) journal.storage.set(row.id, new JRecord(row, this.#connector, this.#toolbox));
+>>>>>>> origin/master
+		}
+	}
 	async #GetOperator(id) {
 		let rows = await this.#connector.Request("dexol", `
 			SELECT * FROM dicts_data WHERE dict = 'operators'
@@ -354,5 +134,111 @@ class Base {
 		}
 		return;
 	}
+}
 
+<<<<<<< HEAD
+	async GetPeriod(data) {
+		let jtypes = ["journal", "archive"];
+		if (!data.jtype || jtypes.indexOf(data.jtype) == -1) return [];
+		else {
+			let journal = data.jtype == "journal" ? this.#journal : this.#archive;
+			let period = [];
+			let moment = this.#toolbox.Moment();
+			let mstart = moment(data.start, "YYYYMMDD");
+			let mend = moment(data.end, "YYYYMMDD");
+			if (Object.entries(data).length > 0) {
+				period = journal.filter(item=> 
+						(data?.del && item.DelStatus == data.delStatus) &&
+						(data?.status && item.Status == data.status || !data?.status && true) &&
+						(data?.store && item.Store == data.store || !data?.store && true) &&
+						(data?.creationMethod && item.CreationMethod == data.creationMethod || !data?.creationMethod && true) &&
+						(data?.start && moment(item.JDocDate, "YYYYMMDD").isAfter(mstart) && data?.end && moment(item.JDocDate, "YYYYMMDD").isBefore(mend)) &&
+						(data?.search && Object.entries(item.Document).find(item=> item[1].toString().toLowerCase().indexOf(data.search.toLowerCase()) != -1) || !data?.search && true) 
+				);
+			}
+			return period;
+		}
+	}
+	async GetJRecord(data) {
+		let jtypes = ["journal", "archive"];
+		let jrecord = {};
+		if (jtypes.indexOf(data.jtype) != -1) {
+			let journal = data.jtype == "journal" ? this.#journal : this.#archive;
+			jrecord = journal.find(item=> item.Id == data.id);
+		}
+		return jrecord;
+	}
+	async DeleteRecord(data) {
+		let jtypes = ["journal", "archive"];
+		if (jtypes.indexOf(data.jtype) != -1) {
+			let journal = data.jtype == "journal" ? this.#journal : this.#archive;
+			let jrecord = journal.find(item=> item.Id == data.id);
+			return jrecord && await jrecord.DeleteRecord() || false;
+		}
+		return false;
+	}
+}
+
+class JRecord {
+	#id;#connector;#toolbox;#base;#creator;#store;#signature;#creationMethod;#status;#jDocDate;#delStatus;
+	#document;#logs;#docDate;
+	constructor(row, connector, toolbox, base) {
+=======
+class JRecord {
+	#id;#connector;#toolbox;#creator;#store;#signature;#creationMethod;
+	#document;#logs;#jDocDate;#docDate;
+	constructor(row, connector, toolbox) {
+>>>>>>> origin/master
+		this.#id = row.id;
+		this.#creator = row.userId;
+		this.#store = row.store;
+		this.#signature = row.signature;
+<<<<<<< HEAD
+		this.#status = row.status;
+		this.#creationMethod = row.type; //1-вручную
+		this.#jDocDate = row.jdocdate;
+		this.#delStatus = row.del;
+		this.#connector = connector;
+		this.#toolbox = toolbox;
+		this.#base = base;
+=======
+		this.#creationMethod = row.type; //1-вручную
+		this.#connector = connector;
+		this.#toolbox = toolbox;
+>>>>>>> origin/master
+		this.#Init(row);
+	}
+	get Id() { return this.#id; }
+	get Creator() { return this.#creator; }
+	get Store() { return this.#store; }
+<<<<<<< HEAD
+	get Status() { return this.#status; }
+=======
+>>>>>>> origin/master
+	get Signature() { return this.#signature; }
+	get CreationMethod() { return this.#creationMethod; }
+	get JDocDate() { return this.#jDocDate; }
+	get DocDate() { return this.#docDate; }
+	get Document() { return this.#document; }
+	get Logs() { return this.#logs; }
+<<<<<<< HEAD
+	get DelStatus() { return this.#delStatus; }
+=======
+>>>>>>> origin/master
+	// get StoreRecord() { return this.#storeRecord; }// ссылка на документ-распределения на складе
+
+	async #Init(row) {
+		let data = JSON.parse(row.data.replace(/\\/gi, `/`));
+		this.#document = data?.document || {};
+		this.#logs = data?.logs || {};
+	}
+<<<<<<< HEAD
+	async DeleteRecord() {
+		let result = await this.#connector.Request("dexol", `
+			UPDATE \`${this.#base.BaseName}\` SET del = '1' WHERE id = '${this.#id}'
+		`);
+		return result.changedRows == 1 || false;
+	}
+=======
+>>>>>>> origin/master
 }
\ No newline at end of file
diff --git a/application/apps/kiwi/Api.js b/application/apps/kiwi/Api.js
index 7b33fb0..e2db1dc 100644
--- a/application/apps/kiwi/Api.js
+++ b/application/apps/kiwi/Api.js
@@ -16,8 +16,9 @@ class Api {
 	#GetPaymentsList(packet, users, application) {
 		let paymentsList = application.PaymentsList;
 		let list = [];
+		let ignore = ["list", "successCnt"];
 		for (let item of paymentsList) {
-			list.push(Object.fromEntries(Object.entries(item).filter(([key]) => key != "list")));
+			list.push(Object.fromEntries(Object.entries(item).filter(([key]) => ignore.indexOf(key) == -1)));
 		}
 		//packet.data.filter = [{name: "id", value: 12}, {name: "terminal", value: "10746127"}];
 		if (packet.data.filter && Array.isArray(packet.data.filter)) {
diff --git a/application/apps/kiwi/Core.js b/application/apps/kiwi/Core.js
index 4d06424..3672693 100644
--- a/application/apps/kiwi/Core.js
+++ b/application/apps/kiwi/Core.js
@@ -125,8 +125,8 @@ class KiwiTerminal {
 	#id;#connector;#toolbox;#agent;
 	#uid;#serial;#title;#persons = [];#status;
 	#software = "Dealer v0";
-	#tasks = [];#maxPayment = 110;
-	#paymentsList = [];
+	#tasks = [];#maxPayment = 160;
+	#paymentsList = [];#isBusy = 0;
 	constructor(row, connector, toolbox, agent) {
 		this.#id = row.record_id;
 		this.#connector = connector;
@@ -141,7 +141,11 @@ class KiwiTerminal {
 	get Status() { return this.#status; }
 	get Software() { return this.#software; }
 	get PaymentsList() { return this.#paymentsList; }
+	get IsBusy() { return this.#isBusy; }
 
+	#PrintMessage(message) {
+		console.log(message);
+	}
 	async #Init(row) {
 		let data = JSON.parse(row.data);
 		this.#uid = parseInt(data?.uid);
@@ -278,25 +282,38 @@ class KiwiTerminal {
 					},
 					body: xml
 				}
+				// console.log("xml=> ", xml);
 				request.post(data, async (err, response, body)=> {
 					if (err) {
 						console.log("err=> ", err);
 						resolve({status: 2});
 					} else {
 						let json = await this.#toolbox.XmlToString(body);
+						// console.log(body);
 						if (json?.response?.$?.result == 0) {
 							if (json?.response?.providers[0]?.checkPaymentRequisites[0]?.$?.result == 0) {
 								if (json?.response?.providers[0]?.checkPaymentRequisites[0]?.payment[0]?.$?.status == 3) {
 									resolve({status: 0});
 								} else if (json?.response?.providers[0]?.checkPaymentRequisites[0]?.payment[0]?.$?.status == 0) {
-									resolve({status: 3});
+									if (json?.response?.providers[0]?.checkPaymentRequisites[0]?.payment[0]?.$?.result == 16) {
+										resolve({status: 16});
+									} else if (json?.response?.providers[0]?.checkPaymentRequisites[0]?.payment[0]?.$?.result == 202) {
+										resolve({status: 202});
+									} else {
+										resolve({status: 3});
+									}
+									// this.#PrintMessage(body);
+
 								} else {
+									this.#PrintMessage(body)
 									resolve({status: 1});
 								}
 							} else {
+								this.#PrintMessage(body)
 								resolve({status: 4, result: json?.response?.providers[0]?.checkPaymentRequisites[0]?.$?.result});
 							}
 						} else {
+							this.#PrintMessage(body)
 							resolve({status: 3, result: json?.response?.$?.result});
 						}
 					}
@@ -336,9 +353,11 @@ class KiwiTerminal {
 								if (json?.response?.providers[0]?.addOfflinePayment[0]?.$?.result == 0) {
 									resolve({status: 0});
 								} else {
+									this.#PrintMessage(body)
 									resolve({status: 4, result: json?.response?.providers[0]?.addOfflinePayment[0]?.$?.result});
 								}
 							} else {
+								this.#PrintMessage(body)
 								resolve({status: 3, result: json?.response?.$?.result});
 							}
 						}
@@ -433,51 +452,105 @@ class KiwiTerminal {
 		});
 	}
 	async SendPayment(payment, task) {
-		console.log("отправляем платеж на сумму ", payment.amount, " для номера ", payment.num, " для задачи ", task.Id);
-		payment.status = 1;
-		let provider = await this.GetProviderByPhone(task.Person, payment);
-		if (provider.status != 0) {
-			payment.status = 7;
-			await task.SaveTaskData();
-			return;
-		}
-		payment.service = provider.id;
-		let lastPayment = await this.GetLastId(task.Person);
-		if (lastPayment.status != 0) {
-			payment.status = 3;
-			await task.SaveTaskData();
-			return;
-		}
-		payment.id = lastPayment.id + 1;
-		let agentBalance = await this.GetBalance(task.Person);
-		if (lastPayment.status != 0) {
-			payment.status = 10;
-			await task.SaveTaskData();
-			return;
-		}
-		if (agentBalance.balance < payment.amount) {
-			payment.status = 8;
-			await task.SaveTaskData();
-			return;
-		}
-		let checkPayment = await this.CheckPaymentRequisites(task.Person, payment);
-		if (checkPayment.status != 0) {
-			payment.status = 4;
-			await task.SaveTaskData();
-			return;
-		}
-		let offlinePayment = await this.#AddOfflinePayment(task.Person, payment);
-		if (offlinePayment.status != 0) {
-			payment.status = 5;
+		if (this.#isBusy == 0) {
+			console.log("отправляем платеж на сумму ", payment.amount, " для номера ", payment.num, " для задачи ", task.Id);
+			this.#isBusy = 1;
+			let methods = [
+				{method: async (...args)=> { return await this.GetProviderByPhone(...args); },     name: "GetProviderByPhone", errStatus: 7},
+				{method: async (...args)=> { return await this.GetLastId(...args); },              name: "GetLastId", errStatus: 3},
+				{method: async (...args)=> { return await this.GetBalance(...args); },             name: "GetBalance", errStatus: 10},
+				{method: async (...args)=> { return await this.CheckPaymentRequisites(...args); }, name: "CheckPaymentRequisites", errStatus: 4},
+				{method: async (...args)=> { return await this.#AddOfflinePayment(...args); },     name: "AddOfflinePayment", errStatus: 5},
+			];
+
+			for (let item of methods) {
+				let result = await item.method(task.Person, payment);
+				if (result.status != 0) {
+					if (item.name == "CheckPaymentRequisites") {
+						if (result.status == 16) payment.status = 16;
+						else if (result.status == 202) payment.status = 202;
+						else payment.status = 4;
+					} else {
+						payment.status = item.errStatus;
+					}
+					await task.SaveTaskData();
+					this.#isBusy = 0;
+					return;
+				}
+				if (item.name == "GetProviderByPhone") payment.service = result.id;
+				if (item.name == "GetLastId") payment.id = result.id + 1;
+				if (item.name == "GetBalance" && result.balance < payment.amount) {
+					payment.status = 8;
+					await task.SaveTaskData();
+					this.#isBusy = 0;
+					return;
+				}
+			}
+			payment.status = 6;
+			this.#isBusy = 0;
 			await task.SaveTaskData();
 			return;
 		}
-		payment.status = 6;
-		await task.SaveTaskData();
-		// console.log("provider=> ", provider);
-		// console.log("lastPayment=> ", lastPayment);
-		// console.log("agentBalance=> ", agentBalance);
-		// console.log("checkPayment=> ", checkPayment);
+
+
+
+
+
+
+		// this.#isBusy = 1;
+		// console.log("отправляем платеж на сумму ", payment.amount, " для номера ", payment.num, " для задачи ", task.Id);
+		// payment.status = 1;
+		// let provider = await this.GetProviderByPhone(task.Person, payment);
+		// if (provider.status != 0) {
+		// 	payment.status = 7;
+		// 	await task.SaveTaskData();
+		// 	this.#isBusy = 0;
+		// 	return;
+		// }
+		// payment.service = provider.id;
+		// let lastPayment = await this.GetLastId(task.Person);
+		// if (lastPayment.status != 0) {
+		// 	payment.status = 3;
+		// 	await task.SaveTaskData();
+		// 	this.#isBusy = 0;
+		// 	return;
+		// }
+		// payment.id = lastPayment.id + 1;
+		// let agentBalance = await this.GetBalance(task.Person);
+		// if (lastPayment.status != 0) {
+		// 	payment.status = 10;
+		// 	await task.SaveTaskData();
+		// 	this.#isBusy = 0;
+		// 	return;
+		// }
+		// if (agentBalance.balance < payment.amount) {
+		// 	payment.status = 8;
+		// 	await task.SaveTaskData();
+		// 	this.#isBusy = 0;
+		// 	return;
+		// }
+		// let checkPayment = await this.CheckPaymentRequisites(task.Person, payment);
+		// if (checkPayment.status != 0) {
+		// 	if (checkPayment.status == 16) payment.status = 16; // Превышен суточный лимит на сумму операций
+		// 	else payment.status = 4;
+		// 	await task.SaveTaskData();
+		// 	this.#isBusy = 0;
+		// 	return;
+		// }
+		// let offlinePayment = await this.#AddOfflinePayment(task.Person, payment);
+		// if (offlinePayment.status != 0) {
+		// 	payment.status = 5;
+		// 	await task.SaveTaskData();
+		// 	this.#isBusy = 0;
+		// 	return;
+		// }
+		// payment.status = 6;
+		// await task.SaveTaskData();
+		// // console.log("provider=> ", provider);
+		// // console.log("lastPayment=> ", lastPayment);
+		// // console.log("agentBalance=> ", agentBalance);
+		// // console.log("checkPayment=> ", checkPayment);
+		// this.#isBusy = 0;
 	}
 
 }
@@ -565,7 +638,7 @@ class KiwiPerson {
 class PaymentsTask {
 	#id;#terminal;#person;#status;#connector;#toolbox;#creationDate;#clearMethod;#tick;
 	#minInterval;#maxInterval;#list;#data;#comment;#delayed = 0;#dateStart;
-	#cnt = 0;#ignoreStatuses = [0,1,4,5,6,7,8,9,10];
+	#cnt = 0;#ignoreStatuses = [0,1,4,5,6,7,8,9,10,16,202];
 	#paymentStatusCheck = [];
 	constructor(row, connector, toolbox, terminal, clearMethod) {
 		this.#id = row.id;
@@ -590,6 +663,9 @@ class PaymentsTask {
 			dateStart: this.#dateStart,
 			comment: this.#comment,
 			sum: this.#list.reduce((total, item)=> total + parseInt(item.amount), 0),
+			successSum: this.#list.reduce((total, item)=> item.status == 0 && (total += parseInt(item.amount)) || (total += 0), 0),
+			cnt: this.#list.length,
+			successCnt: this.#list.reduce((total, item)=> item.status == 0 && (total += 1) || (total += 0), 0),
 			list: this.#list,
 			status: this.#status,
 		}
@@ -605,7 +681,7 @@ class PaymentsTask {
 		this.#list = this.#data.list;
 		if (this.#status == 1) {
 			this.#SetDates();
-			this.#tick = setInterval(async ()=> { await this.#CheckPayment() }, 15000);
+			this.#tick = setInterval(async ()=> { await this.#CheckPayment() }, 10000);
 		}
 	}
 	#SetDates() {
@@ -633,20 +709,6 @@ class PaymentsTask {
 		}
 	}
 	async #CheckPayment() {
-		let payment = this.#list.find(item=> this.#ignoreStatuses.indexOf(item.status) == -1);
-		if (!payment) {
-			if (this.#paymentStatusCheck.length == 0) await this.#Complete();
-		} else {
-			let start = true;
-			let moment = this.#toolbox.Moment();
-			let currentDate = moment();
-			let paymentDate = moment(payment.date).format("YYYY-MM-DDTHH:mm:ss");
-			if (currentDate.isAfter(paymentDate) && start) {
-				payment.status = 0;
-				await this.#terminal.SendPayment(payment, this);
-			}
-		}
-
 		// проверить статусы
 		for (let payment of this.#list) {
 			if (payment.status == 6) {
@@ -655,6 +717,7 @@ class PaymentsTask {
 				if (check.status == 0) {
 					if (check.paymentStatus == 2) {
 						payment.status = 0;
+						console.log("платеж успешен");
 						this.#paymentStatusCheck = this.#paymentStatusCheck.filter(item=> item.hash != payment.hash);
 					} else if (check.paymentStatus == 0) {
 						payment.status = 5;
@@ -664,6 +727,23 @@ class PaymentsTask {
 				await this.SaveTaskData();
 			}
 		}
+
+
+		let payment = this.#list.find(item=> this.#ignoreStatuses.indexOf(item.status) == -1);
+		if (!payment) {
+			if (this.#paymentStatusCheck.length == 0) await this.#Complete();
+		} else {
+			let start = true;
+			let moment = this.#toolbox.Moment();
+			let currentDate = moment();
+			let paymentDate = moment(payment.date).format("YYYY-MM-DDTHH:mm:ss");
+			if (currentDate.isAfter(paymentDate) && start) {
+				if (this.#terminal.IsBusy == 0) {
+					payment.status = 0;
+					await this.#terminal.SendPayment(payment, this);
+				}
+			}
+		}
 	}
 	async #Complete() {
 		this.#status = 0;
-- 
2.35.0.windows.1

